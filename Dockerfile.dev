# Build
FROM golang:alpine

RUN apk add --no-cache -U build-base git make ffmpeg-dev

RUN mkdir -p /src

WORKDIR /src

# Copy Makefile
COPY Makefile ./

# Copy go.mod and go.sum and install and cache dependencies
COPY go.mod .
COPY go.sum .

# Install deps
RUN make deps
RUN go mod download

# Copy static assets
COPY ./internal/theme/static/css/* ./internal/theme/static/css/
COPY ./internal/theme/static/img/* ./internal/theme/static/img/
COPY ./internal/theme/static/js/* ./internal/theme/static/js/

# Copy pages
COPY ./internal/pages/* ./internal/pages/

# Copy templates
COPY ./internal/theme/templates/* ./internal/theme/templates/

# Copy langs (localization / i18n)
COPY ./internal/langs/* ./internal/langs/

# Copy sources
COPY *.go ./
COPY ./internal/*.go ./internal/
COPY ./internal/auth/*.go ./internal/auth/
COPY ./internal/session/*.go ./internal/session/
COPY ./internal/passwords/*.go ./internal/passwords/
COPY ./internal/webmention/*.go ./internal/webmention/
COPY ./types/*.go ./types/
COPY ./types/lextwt/*.go ./types/lextwt/
COPY ./cmd/yarnd/*.go ./cmd/yarnd/

# Build server binary
RUN make server DEBUG=1

VOLUME /src/data

# force cgo resolver
ENV GODEBUG=netdns=cgo

CMD ["./yarnd", "-D", "-O", "-R"]
